import pandas as pd
from pyspark.sql import DataFrame, SparkSession


def run(
    spark: SparkSession,
    c360_base: DataFrame,
    propensity_decile: str,
    channel: str,
    Output_type: "LEADS",
):

    req_fields = [
        "with_loan_ind",
        "cust_nbr",
        "open_tag",
        "acct_status_exclude",
        "card_status_exclude",
        "nonactive",
        "card_blk_tag",
        "pastdue_latest",
        "pastdue",
        "dlq_worst_12m_ago",
        "dpd1x30x24",
        "restructured",
        "writtenoff",
        "yourcash",
        "CORPORATE",
        "PERSLIB",
        "privatelabel",
        "instacard",
        "securedcard",
        "dollarcard",
        "testcard",
        "unsubs",
        "lifestyle",
        "affluence",
        "nfis_final",
        "exclude_age_credit",
        "master_id",
        "ncr_tag",
        "auto_otherloc",
        "with_depo_ind",
        "with_email",
        "with_mobile",
        "mobile_final",
        "email_final",
        "with_home_owned",
        "with_homeloan_ever",
        "min_dist_projects_tag",
        "lifestage",
    ]

    check_cols(c360_base, req_fields)

    waterfall = waterfall_temp_creation(
        Base=c360_base,
        criteria_filter=f"cust_nbr IS NOT NULL",
        criteria_desc=f"BANKARD Open Base as of {max_existasof_bkrd}",
    )

    waterfall = waterfall_temp_creation(
        Base=c360_base,
        criteria_filter=f"with_loan_ind = 0",
        criteria_desc=f"Without LOAN as of {max_existasof_rsb}",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"acct_status_exclude = 0 AND card_status_exclude = 0",
        criteria_desc=f"Exclude: Acc or Card Status not 1 or 2",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"nonactive = 0",
        criteria_desc="Exclude : Acct Block Code not space, A or V",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"card_blk_tag = 0",
        criteria_desc="Exclude : Card Block Code not space, A, V, or not delivered I/IN/IB",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"pastdue_latest = 0 AND pastdue = 0 AND dlq_worst_12m_ago = 0 AND dpd1x20x24 = 0",
        criteria_desc="Exclude : Customers with Past Due Acct",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"restrctured = 0",
        criteria_desc="Exclude : Customers with Restructured Acct",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"writtenoff = 0",
        criteria_desc="Exclude : Customers with Written-Off Acct",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"yourcash = 0",
        criteria_desc="Exclude : Your Cash Accts",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"CORPORATE = 0 AND PERSLIB = 0",
        criteria_desc="Exclude : Corporate and Personal Liability",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"privatelabel = 0",
        criteria_desc="Private Label Accts",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"instacard = 0 AND securedcard = 0 AND dollarcard = 0 AND testcard = 0",
        criteria_desc="Exclude : Instacards, Secured Cards, Dollar Cards, Test Cards",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"unsubs = 0",
        criteria_desc="Exclude : Unsubscribed Emails",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"nfis_final = 0",
        criteria_desc="Exclude CIF from NFIS List",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"exclude_age_credit2 = 0",
        criteria_desc=f"Age group is within 21-55 y/o (Offer=LOAN)",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"rcbc_employee = 0",
        criteria_desc=f"Non RCBC Employee",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"{affluence.upper()} IN ('AFFLUENT', 'SUPER AFFLUENT')",
        criteria_desc=f"Affluent, Super Affluent",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"with_home_owned = 0",
        criteria_desc=f"Without Home Ownership",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"with_homeloan_ever = 0",
        criteria_desc=f"Without Home Loan Ever",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"min_dist_projects_tag IN ('A. Within 5KM', 'B. Within 10KM')",
        criteria_desc=f"Home or Work Address within 10km from Construction Projects",
    )

    waterfall = waterfall_temp_creation(
        Base=waterfall["leads"],
        criteria_filter=f"UPPER(lifestage) IN ('MATURE MARRIED','MATURE SINGLE','YOUNG MARRIED','YOUNG SINGLE')",
        criteria_desc=f"Young Single, Young Married, Mature Single, Mature Married",
    )

    if channel.strip().upper() not in ["ALL", "VIBER/SMS", "EMAIL", "DIGITAL", "P360"]:
        print("Incorrect Channel Selected. Please see valid keyword from the list.")
        raise ValueError("The script ends")

    if channel.strip().upper() in ["ALL"]:
        waterfall = waterfall_temp_creation(
            Base=waterfall["leads"],
            criteria_filter=f"cust_nbr IS NOT NULL",
            criteria_desc=f"Channel : {channel}",
        )

    if channel.strip().upper() in ["DIGITAL"]:
        waterfall = waterfall_temp_creation(
            Base=waterfall["leads"],
            criteria_filter=f"with_email = 1 OR with_mobile = 1",
            criteria_desc="With Mobile or Email",
        )

    if channel.strip().upper() in ["VIBER/SMS"]:
        waterfall = waterfall_temp_creation(
            Base=waterfall["leads"],
            criteria_filter=f" with_mobile = 1",
            criteria_desc="With Mobile",
        )
    if channel.strip().upper() in ["EMAIL"]:
        waterfall = waterfall_temp_creation(
            Base=waterfall["leads"],
            criteria_filter=f"with_email = 1",
            criteria_desc="With Email",
        )

    if propensity_decile.isNull():
        waterfall = waterfall_temp_creation(
            Base=waterfall["leads"],
            criteria_filter=f"cust_nbr IS NOT NULL",
            criteria_desc="HOME Propensity Decile : ALL",
        )
    elif (
        not propensity_decile.isNull()
        and int(propensity_decile).isnumeric()
        and int(propensity_decile) > 0
    ):
        waterfall = waterfall_temp_creation(
            Base=waterfall["leads"],
            criteria_filter=f"cust_nbr IS NOT NULL",
            criteria_desc="HOME Propensity Decile : ALL",
        )
    else:
        print("Incorrect value for propensity_decile. Please check")
        raise ValueError("The script ends")

    # Arrange waterfall report
    waterfall_temp = waterfall.withColumn(
        "Counter", F.row_number().over(Window.orderBy(F.lit(1)))
    ).select("Counter", "Criteria", "Count")

    if Output_type.strip().upper() in ["LEADS"]:
        output = waterfall["leads"]
    elif Output_type.strip().upper() in ["WATERFALL"]:
        output = waterfall_temp
    else:
        output = {"leads": waterfall["leads"], "waterfall": waterfall_temp}

    if waterfall["leads"].count() > 0 and waterfall_temp.count() > 0:
        print("\n")
        print(
            f"Waterfall/Leads for Home Loan Offer is successfully created with",
            {waterfall["leads"].count()},
            "observations.\n\n",
        )
        return output
    else:
        print(
            "Waterfall/Leads for Home Loan Offer was not created successfully. Please check error"
        )
